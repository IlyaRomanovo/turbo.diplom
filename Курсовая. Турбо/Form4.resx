<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="textBox1.Text" xml:space="preserve">
    <value>Событие (от англ. Event) - это один из объектов tkinter. Сведения о событии хранятся в атрибутах 
класса Event. К ним относятся координаты курсора мыши, код нажатой клавиши и другие.

Окно приложения не появится до тех пор, пока не начнет работать 
бесконечный цикл обработки сообщений, запускаемый инструкцией .mainloop().

Программа остается в цикле обработки пользовательских
и системных сообщений пока не будет закрыто окно.

Можно выделить следующие часто используемые типы событий

События мыши
События клавиатуры

Обработчик события — это функция или метод, вызывающиеся при возникновении события</value>
  </data>
  <data name="textBox2.Text" xml:space="preserve">
    <value>Элементы управления могут реагировать на разыне события. Для сообщения виджету,
на какое событие и как он должен реагировать, используется метод bind, принимающий
два параметра

bind(event,function)

event - название события
function – функция, которая будет вызвана при наступлении события

Свойство event.widget содержит ссылку на виджет, сгенерировавший событие. 
Свойство event.type - название события.</value>
  </data>
  <data name="textBox3.Text" xml:space="preserve">
    <value>События, производимые мышью:

Событие - Щелчок левой кнопкой мыши
Имя - &lt;Button-1&gt;

Событие - Щелчок правой кнопкой мыши
Имя - &lt;Button-2&gt;

Событие - Щелчок правой кнопкой мыши
Имя - &lt;Button-3&gt;

Событие - Двойной щелчок левой кнопкой мыши
Имя - &lt;Double-Button-1&gt;

Событие - Движение мыши
Имя - &lt;Motion&gt;

Название события заключается в угловые скобки &lt;&gt;.</value>
  </data>
  <data name="textBox4.Text" xml:space="preserve">
    <value>Обработчик события - это функция, которая вызывается при возникновении события. В нашем 
примере все обработчики установлены на главное окно программы. В заголовке 
главного окна в зависимости от того, двигается мышь, щелкают левой или правой 
кнопкой меняется надпись.

При записи функций событий мыши в качестве параметра передается 
объект event, который содержит информацию о событии. 

Пример:

import tkinter
from tkinter import *

root = tkinter.Tk()

root.title("События")
root.geometry('600x240')

# нажата левая кнопка мыши
def fun1(event):
  root.title("Левая кнопка мыши")

# нажата правая кнопка мыши
def fun3(event):
  root.title("Правая кнопка мыши")

# перемещение мыши
def move(event):
  x = event.x
  # координата мыши x
  y = event.y
  # координата мыши y
  s = "Движение мышью {}x{}".format(x, y)
  root.title(s)

root.bind('&lt;Button-1&gt;', fun1)
# привязываем к окну событие - клик левой кнопкой мыши

root.bind('&lt;Button-3&gt;', fun3)
# привязываем к окну событие - клик правой кнопкой мыши

root.bind('&lt;Motion&gt;', move)
# привязываем к окну событие - движение мыши

root.mainloop()</value>
  </data>
  <data name="label10.Text" xml:space="preserve">
    <value>def move(_____):
  x = event.x
  y = _____.y
  s = "Движение мышью {}x{}".format(x, y)
  root.title(s)

root.bind('&lt;________&gt;', fun1)

root.bind('&lt;________&gt;', fun3)

root.bind('&lt;________&gt;', move)

root.mainloop()</value>
  </data>
  <data name="label15.Text" xml:space="preserve">
    <value>import _______
from tkinter import *
root = tkinter.Tk()
root.title("События")
root.geometry('600x240')

def fun1(_____):
  root.title("Левая кнопка мыши")

def fun3(_____):
  root.title("Правая кнопка мыши")</value>
  </data>
</root>