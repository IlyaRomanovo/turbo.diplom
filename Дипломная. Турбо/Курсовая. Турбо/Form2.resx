<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="textBox2.Text" xml:space="preserve">
    <value>Для вывода виджета в окно программы применяются диспетчеры компоновки, которые управляют 
местоположением и размерами виджетов. Диспетчеры компоновки также называют упаковщиками.

Имеются три типа диспетчера компоновки: 

простой упаковщик - pack
таблица (сетка) - grid 
произвольное расположение - place. 

Для диспетчера – pack указывается сторона программного окна, где должен быть расположен виджет, 
на рис. задано 'left' (слева)
Для диспетчера grid - программное окно покрывается невидимой таблицей и указывается номер 
строки (row) и номер столбца (column) таблицы, на рис. задано row = 1 column = 1
Для диспетчера place задаются координаты верхнего левого угла виджета, на рис. задано x = 200, y = 50. 
В качестве примера использования диспетчера компоновки напишем самое простое приложение, в 
котором с помощью диспетчера pack располагается кнопка в программном окне.

Пример (pack)

from tkinter import *
root = Tk()
root.title('Pack()')
root.geometry('300x200')

but = Button(text = "OK")
but.pack()

root.mainloop()

Пример (grid)

from tkinter import *
root = Tk()
root.title('Grid()')
root.geometry('300x200')

but = Button(text = "OK")
but.grid(row = 1, column = 1)

root.mainloop()

Пример (place)

from tkinter import *
root = Tk()
root.title('Place()')
root.geometry('300x200')

but = Button(text = "OK")
but.place(x = 120, y = 80)

root.mainloop()
</value>
  </data>
  <data name="textBox1.Text" xml:space="preserve">
    <value>Графический интерфейс предназначен для взаимодействия пользователя с программой.

Любое приложение с графическим интерфейсом всегда имеет главное окно, в котором располагаются элементы управления программы: кнопки, метки, поля ввода, меню и т.д. 
Эти элементы управления называются виджетами (анг. элемент управления, штучка). 
Для языка программирования Python виджеты включены в специальный модуль — tkinter (кроссплатформенная библиотека для разработки графического интерфейса на 
языке Python), 
который обеспечивает достаточно простое 
создание приложения с графическим интерфейсом.

Названия основных виджетов, которые наиболее часто используются:
Метка - Label
Кнопка - Button
Поле для ввода - Entry
Флажок - Checkbutton
Переключатель - Radiobutton
Рамка - Frame

Обратим внимание на то, что все названия виджетов начинаются с прописной буквы. У каждого 
виджета имеется свой набор свойств.</value>
  </data>
</root>